<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bob Jiang Blog]]></title>
  <link href="http://bobjiang.github.com/atom.xml" rel="self"/>
  <link href="http://bobjiang.github.com/"/>
  <updated>2013-02-12T15:15:52+08:00</updated>
  <id>http://bobjiang.github.com/</id>
  <author>
    <name><![CDATA[Bob Jiang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[询问的力量(ScrumMasters与敏捷教练)： 敏捷教练小提示 - 第二部分]]></title>
    <link href="http://bobjiang.github.com/blog/2013/02/12/scrummaster-and-coaching-part2/"/>
    <updated>2013-02-12T10:54:00+08:00</updated>
    <id>http://bobjiang.github.com/blog/2013/02/12/scrummaster-and-coaching-part2</id>
    <content type="html"><![CDATA[<p><img src="http://bobjiang.github.com/images/sm_and_coaching-p2.jpg"></p>

<p>我们如何构造有力问题呢？我在读一篇Eric E. Vogt、 Juanita Brown 和 David Isaacs写的白皮书，有关“有力问题的艺术：催化深思，创新与行动”在2003年，这篇论文提到用“Which”开始的问题是无力的，封闭问题也是如此，或者答案为“是/否”的问题。Who, when, where比which有力一些，然而why how what帮助我们构造有力的问题！在所有一般情况下它们很有帮助。</p>

<p>注意！有时why, how what问题是有害的。下面有几个例子。</p>

<!-- more -->


<ol>
<li>为什么我们还有没完成的故事？</li>
<li>什么让我们的员工总是在用即时聊天？</li>
<li>我们怎么能想到这么差的设计？</li>
</ol>


<p>项目中总是有起伏。我们碰到客户报告的代码质量问题。客户发邮件给我们的项目经理。项目经理想要马上开会，指出问题并找到解决方案。</p>

<p>如果你是这个项目经理，你会问下面哪些问题？</p>

<ol>
<li>我们对交付的代码质量满意吗？</li>
<li>我们什么时候对我们的交付最满意？我们如何做到的？</li>
<li>你最满意的写代码的方式是什么？</li>
<li>为什么我们的代码质量反馈总是起伏不定？</li>
</ol>


<p>或者当你想要询问某个程序员这个问题时，你会选择哪个？</p>

<ol>
<li>作为团队成员你是如何编写高质量代码，从而我们可以达到取悦客户的目标？或者</li>
<li>以你编写高质量代码的经验，我们如何能让团队编写相似的高质量代码？</li>
</ol>


<p>顺便问一下，你认为Jim可能成为一个更好的教练吗（连接）？难道你不认为Jim可以问Sachin第二个问题，并让Sachin理解他自己真正的问题吗？</p>

<p>可以很肯定你的工作和项目中也有相关的例子。你有想过问题的范围与潜在的假设吗？是的。每个问题都有一个隐含或者显式的范围，也还有潜在的假设。</p>

<p>第三部分将详细描述这两个方面</p>

<hr />

<p><a href="http://bobjiang.com/blog/2013/02/10/scrummaster-and-coach-opening/">Scrummasters与敏捷教练系列（开篇）</a><br/>
<a href="http://bobjiang.com/blog/2013/02/11/scrummaster-and-coaching-part1/">询问的力量： 敏捷教练小提示 - 第一部分</a><br/>
<a href="http://bobjiang.com/blog/2013/02/12/scrummaster-and-coaching-part2/">询问的力量： 敏捷教练小提示 - 第二部分</a><br/>
询问的力量： 敏捷教练小提示 - 第三部分<br/>
询问的力量： 敏捷教练小提示 - 第四部分</p>

<hr />

<p><a href="http://se-thoughtograph.blogspot.in/2012/10/the-power-of-inquiry-coaching-tips-for_26.html">原文链接</a> http://se-thoughtograph.blogspot.in/2012/10/the-power-of-inquiry-coaching-tips-for_26.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[询问的力量(ScrumMasters与敏捷教练系列)： 敏捷教练小提示 - 第一部分]]></title>
    <link href="http://bobjiang.github.com/blog/2013/02/11/scrummaster-and-coaching-part1/"/>
    <updated>2013-02-11T07:32:00+08:00</updated>
    <id>http://bobjiang.github.com/blog/2013/02/11/scrummaster-and-coaching-part1</id>
    <content type="html"><![CDATA[<p><img src="http://bobjiang.github.com/images/sm_and_coaching-p1.jpg"></p>

<p>&#8220;询问的力量：敏捷教练小提示&#8221;是我在印度金奈2012敏捷之旅的keynote演讲主题。我写这篇博客分享我的演讲重点。</p>

<p>我们先看看“询问”这个词。询问意思是探索、探查、调查、检查、分析、审查或者询问。它是关于搜索某事的信息或者做正式的研究。询问时教练辅导有力方式之一。敏捷教练与ScrumMasters可以通过理解询问的力量获得对团队正向的影响。</p>

<p>有效的询问包括有力的问题。我们可以学习到问问题的重要性或者询问的力量，爱因斯坦曾经说过-“如果我有一个小时解决问题，我的人生就依赖于解决方案，我会先花55分钟确定恰当的问题，因为一旦我知道了正确的问题，我会在五分钟内解决问题。”</p>

<!-- more -->


<p>在Dorothy Leeds的书《The 7 Powers of Questions》中说到，“问题  1）需要答案，2）激发思考，3）让我们可控，4）使人们开创，5）给出有价值的信息，6）引导有质量的聆听，7）使人们说服自己。”</p>

<p>这个情境下，我分享话题的日程。日程包含一整套问题！</p>

<ol>
<li>为什么问有力的问题？</li>
<li>什么是有力的问题？</li>
<li>怎么样问有力的问题</li>
<li>如何保持带走的知识，保持联系，并分享辅导经验?</li>
</ol>


<p>为什么问有力的问题？有力的问题</p>

<ol>
<li>发起反思与富有成效的会话</li>
<li>使假设浮现</li>
<li>产生热情与活力</li>
<li>集中注意力与询问</li>
<li>包含更多的问题。</li>
</ol>


<p>无力的问题正好相反！不会引发沉思与富有成效的会话，隐藏假设，活力衰竭，使人们消极。</p>

<p>我们可以区分有力的问题与无力的问题。下面的问题你怎么看？哪些是有力的？哪些是无力的？</p>

<ol>
<li>我们这个迭代做的好吗？</li>
<li>你在做哪个用户故事？</li>
<li>你做单元测试了吗？</li>
<li>给测试人员提供高质量的交付物意味着什么？</li>
<li>还有什么风险我们没有想到？</li>
<li>我们现在看到的可能性是多少？</li>
</ol>


<p>前两个问题明显是无力的。假设你是ScrumMaster或者敏捷教练。你想知道项目中正在做什么。参加每日站会！尽管这样，你问前两个问题吗？或者你试图继续有力问题的对话使你得到想要的答案。</p>

<p>第三个问题是封闭问题（是、否）。我们都知道最后三个问题是高质量的问题，有力的问题。这些问题使你思考、参与并找到答案。</p>

<p>我们如何构造有力的问题呢？在第二部分我们给出几个例子。</p>

<hr />

<p><a href="http://bobjiang.com/blog/2013/02/10/scrummaster-and-coach-opening/">Scrummasters与敏捷教练系列（开篇）</a><br/>
<a href="http://bobjiang.com/blog/2013/02/11/scrummaster-and-coaching-part1/">询问的力量： 敏捷教练小提示 - 第一部分</a><br/>
<a href="http://bobjiang.com/blog/2013/02/12/scrummaster-and-coaching-part2/">询问的力量： 敏捷教练小提示 - 第二部分</a><br/>
询问的力量： 敏捷教练小提示 - 第三部分<br/>
询问的力量： 敏捷教练小提示 - 第四部分</p>

<hr />

<p><a href="http://se-thoughtograph.blogspot.in/2012/10/the-power-of-inquiry-coaching-tips-for.html">原文链接</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ScrumMasters与敏捷教练系列（开篇）]]></title>
    <link href="http://bobjiang.github.com/blog/2013/02/10/scrummaster-and-coach-opening/"/>
    <updated>2013-02-10T07:31:00+08:00</updated>
    <id>http://bobjiang.github.com/blog/2013/02/10/scrummaster-and-coach-opening</id>
    <content type="html"><![CDATA[<p><img src="http://bobjiang.github.com/images/sm_and_coaching.jpg"></p>

<p>很多天之前， 我复习了一遍Ken Schwaber和Jeff Sutherlan共同开发和维护的“Scrum指南”。 我集中于ScrumMaster角色涉及“教练”方面的内容，下面是我的一些发现：</p>

<p>Scrum Master服务开发团队的几种方式，包括：</p>

<ul>
<li>指导开发团队自组织和跨职能</li>
<li>指导开发团队没有完全采纳与理解Scrum的组织环境</li>
</ul>


<p>Scrum Master服务组织的几种方式，包括</p>

<ul>
<li>带领和指导组织采纳Scrum</li>
</ul>


<p>为了弄清这几点，我开始回忆过去十年的事件。那个时候对于敏捷方法我们都是新手。在印度Scrum还不是很流行。我们正在学习迭代开发并尝试理解与跟随敏捷原则。XP那时很流行。</p>

<!-- more -->


<p>我们团队不是完全自组织的。Jim，组织中一个高级项目经理负责建立项目团队，与团队一起工作并确保交付日期。之前他有一些RUP的经验。Jim是个优秀的人、经验丰富的经理、求知学者与导师。</p>

<p>对我而言，Jim的角色有点像ScrumMaster。</p>

<p>在项目早期Jim注意到Sailesh，团队中的一员总是迟到（1小时或2小时甚至有时候3小时），完成任务后就回家。Jim思想很开放。他主张弹性工作时间。Jim没有冲动做出任何判断只要Sailesh可以交付并完成他的承诺。Sailesh是个非常优秀的程序员，他写的代码质量非常高也负责一些复杂的特性。</p>

<p>一个月左右，Jim发现有个团队成员需要Sailesh的帮助解决技术问题。但Sailesh不在。和往常一样，他那天迟到了然后开始他自己的工作。很明显，每天Sailesh有足够的时间完成自己的工作。他的日常计划包含协作或者帮助别人或者互相帮助了吗？Sailesh有点自负因为他的技能和经验。他不需要其他团队成员的帮助。也许你猜到了，他没有任何协作的态度。</p>

<p>这里有问题。观察到类似Sailesh的这个事情后，Jim有点担忧并在第二天上午九点召集一个会议。Jim想要我和他们一起开会。因为在接下来几个月Jim准备让我接班。</p>

<p>第二天早上Sailesh又迟到了。他9:40走进会议室，随口说，“Hi Jim,我刚刚到，我们可以开始了吗？”。已经迟到了40分钟。</p>

<p>Jim忍无可忍，回答，“Sailesh，现在9:40！你怎么来晚了？”。</p>

<p>“我凌晨一点睡觉，也起晚了！”</p>

<p>“我们昨天计划好的会议。你接受了并准时下班。因此今天早上我很惊奇你为什么不在9点之前赶到。”</p>

<p>“是的。但是通常我来的有点晚。今天没想到车胎漏气了！对不起。”</p>

<p>我一直在听着他们的对话。我很震惊。毫无疑问，Sailesh没有组织概念。他只关心他自己的任务。他没有重视同事的时间。</p>

<p>会议又开了10分钟，最后Jim严厉地说，“Sailesh，你必须按照公司规定时间每天准时上班。如果你偶尔迟到30分钟或者一小时是可以的，但你一直这样，我们都知道你可以准时。我们是一个团队，不是一盘散沙。”</p>

<p>Sailesh离开了会议室。Jim找我聊了一会儿。我们谈到两个选择。第一个是找Sailesh谈谈，辅导帮助他理解他的强项与可改进的地方。第二个是，当然如果第一个不奏效，让他离开项目再进一步商议。</p>

<p>最后，过了几个月Sailesh辞职了。看起来他想要继续作为软件架构的个人专家。我不确信他个人是否可以成功因为他缺少合作精神。</p>

<p>回想一下，Jim和我是否可以有不同的处理方式。我们没有错吗？早期我们没有注意到或者把Sailesh团结在一起吗？如果再碰到类似的问题，我们会怎么做？</p>

<p>你的项目碰到过类似问题吗？你的解决方法是什么？</p>

<p>想要了解更多，请阅读 “询问的力量：敏捷教练小提示”系列
备注：为了保密，故事里的采用的是化名。</p>

<hr />

<p><a href="http://bobjiang.com/blog/2013/02/10/scrummaster-and-coach-opening/">Scrummasters与敏捷教练系列（开篇）</a><br/>
<a href="http://bobjiang.com/blog/2013/02/11/scrummaster-and-coaching-part1/">询问的力量： 敏捷教练小提示 - 第一部分</a><br/>
<a href="http://bobjiang.com/blog/2013/02/12/scrummaster-and-coaching-part2/">询问的力量： 敏捷教练小提示 - 第二部分</a><br/>
询问的力量： 敏捷教练小提示 - 第三部分<br/>
询问的力量： 敏捷教练小提示 - 第四部分</p>

<hr />

<p>原文链接 <a href="http://se-thoughtograph.blogspot.in/2012/10/scrum-masters-and-coaching.html">http://se-thoughtograph.blogspot.in/2012/10/scrum-masters-and-coaching.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试人员应该参加回顾会议吗?]]></title>
    <link href="http://bobjiang.github.com/blog/2013/02/07/keep-testers-out-of-retrospective/"/>
    <updated>2013-02-07T16:34:00+08:00</updated>
    <id>http://bobjiang.github.com/blog/2013/02/07/keep-testers-out-of-retrospective</id>
    <content type="html"><![CDATA[<p>Today I read a monthly news from Mike Cohn, and it is very interesting. Should we exclude testers from retrospective? I don&#8217;t think so, what&#8217;s your opinion?</p>

<p>I&#8217;ve decided we should kick all the testers out of sprint retrospectives. We don&#8217;t need them. They aren&#8217;t really part of the team, anyway. They think differently and their issues aren&#8217;t really the same issues faced by the real team.</p>

<p><img src="http://bobjiang.github.com/images/keepout.jpg"></p>

<!-- more -->


<p>How&#8217;d that sound? It was hard to even type so hopefully it took you pretty far aback.</p>

<p>However, I occasionally hear exactly that same message except about product owners. I can&#8217;t think of a single good reason why a team would want to hold a retrospective without the product owner present. I can think of many bad reasons why they may want to&#8211;but each of those should be the topic of a retrospective!</p>

<p>If you&#8217;re tempted to run a sprint retrospective without your product owner, I strongly suggest you think about why. Product owners are full, first-class team members. It&#8217;s critical that they participate in retrospectives and they are as open as everyone else to hearing things they can do to improve. Teams that don&#8217;t include their product owner tend to suffer from us vs. them thinking that is almost always harmful to the project.</p>

<p>I hope your next retrospective is successful. To help that happen, make sure the product owner is there.</p>

<p>Included below are two links that can help. The first is a description of the sprint retrospective. It briefly summarizes my preferred approach to that meeting&#8211;a <strong>start, stop, and continue technique</strong>. The second is a link to a review of the Agile Retrospectives book by Esther Derby and Diana Larsen, which should be required reading for every ScrumMaster.</p>

<h1>Sprint Retrospective  </h1>

<p>No matter how good a Scrum team is, there is always opportunity to improve. Although a good Scrum team will be constantly looking for improvement opportunities, the team should set aside a brief, dedicated period at the end of each sprint to&#8230;</p>

<p><a href="http://www.mountaingoatsoftware.com/scrum/sprint-retrospective">Continue Reading&#8230;</a></p>

<h1>Agile Retrospectives:Making Good Teams Great </h1>

<p>Excellent advice for those desiring more frequent, shorter, better retrospectives. One of the challenges facing an agile team that holds a retrospective at the end of each one– to four–week iteration is how to keep the meetings fresh. When done&#8230;</p>

<p><a href="http://www.mountaingoatsoftware.com/reviews/agile-retrospectives">Continue Reading&#8230;</a></p>

<p>Origin from Mike Cohn&#8217;s Blog</p>

<hr />

<p>最后揭晓答案:<br/>
在Scrum中,Sprint Retrospective会议要求全体团队成员参加,包括Scrum Master, Product Owner, Team(这里当然包含测试人员)以及其他相关人.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通用PMBOK概念转化为敏捷概念]]></title>
    <link href="http://bobjiang.github.com/blog/2013/01/05/translating-pmbok-concepts/"/>
    <updated>2013-01-05T08:57:00+08:00</updated>
    <id>http://bobjiang.github.com/blog/2013/01/05/translating-pmbok-concepts</id>
    <content type="html"><![CDATA[<h2>PMBOK基本过程组和它们对应的敏捷概念</h2>

<h3>启动过程 vs 章程（charting）</h3>

<ul>
<li><strong>PMBOK启动过程</strong>：评估项目价值（固定预算），定义初步范围（固定范围），分配资源（固定资源），以及确定时间线（固定时间）。</li>
<li><strong>敏捷章程</strong>：确立愿景（共同的理解），确定目标（共享的目标），组建团队（没有承诺），以及确定时间线（固定时间）。每次迭代（里程碑）的开始重新审视愿景。

<h3>规划过程vs持续计划</h3></li>
<li><strong>PMBOK规划过程</strong>：所有计划活动（项目计划、HR、风险管理等）在项目开始已经完成。</li>
<li><strong>敏捷持续计划</strong>：当有更多的信息与业务优先级改变时，计划活动发生在项目之前和贯穿始终。

<h3>执行过程vs持续交付</h3></li>
<li><strong>PMBOK执行过程</strong>：计划最终定下来后工作才开始（当前过程），利益相关者是满意的（至少这个时候）以及取得资源。
-<strong> 敏捷持续交付</strong>：贯穿项目始终计划和交付在1-4周的迭代中进行。</li>
</ul>


<!-- more -->


<h3>监控过程vs适应变化</h3>

<ul>
<li><strong>PMBOK监控过程</strong>：为了交付固定范围的内容要严密监控时间和成本。</li>
<li><strong>敏捷适应变化</strong>：时间和成本是固定的，范围基于变化的业务需求是可变的。

<h3>收尾过程vs收尾</h3></li>
<li><strong>PMBOK收尾过程</strong>：项目结束的时候得到客户与利益相关者验收的正式过程。</li>
<li><strong>敏捷收尾</strong>：非正式的过程因为贯穿项目始终客户与利益相关者已经提供反馈。收尾阶段一个重要的活动是回顾。这是实现持续改进的一个关键点。

<h2>PMBOK知识领域和它们对应的敏捷概念</h2></li>
<li><strong>整合管理</strong>变成迭代计划、跟踪与管理。</li>
<li><strong>范围、时间、成本管理</strong>变成固定时间与成本、可变范围。</li>
<li><strong>质量管理</strong>变成持续集成、测试驱动开发、持续改进。</li>
<li><strong>人力资源管理</strong>变成更关注于团队而不是个人，奖励团队的成功而不是个人的成功。</li>
<li><strong>风险管理</strong>变成以迭代为基础的（比如所有计划与审查会议）整个团队参与识别、监视与分析风险的频繁反馈。</li>
<li><strong>沟通管理</strong>变成经常的面对面沟通、每日站会、迭代计划与审查会议。</li>
</ul>


<hr />

<p>转载请注明来源</p>

<p><a href="http://www.versionone.com/pdf/Translating_PMBOK_Concepts.pdf">原文来自VersionOne</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012 年终总结]]></title>
    <link href="http://bobjiang.github.com/blog/2013/01/02/2012-summary/"/>
    <updated>2013-01-02T14:26:00+08:00</updated>
    <id>http://bobjiang.github.com/blog/2013/01/02/2012-summary</id>
    <content type="html"><![CDATA[<p>整体印象：2012年目标完成的比较差，如下图：</p>

<p><img src="http://bobjiang.github.com/images/Bob-2012-perf.jpg"></p>

<p>我的2012总结分为以下几个方面：</p>

<ul>
<li>健康</li>
<li>工作</li>
<li>家庭</li>
<li>社交</li>
<li>读书</li>
<li>其他几个方面在2012年初没有做计划，就不一一总结</li>
</ul>


<!-- more -->


<p><strong>健康</strong>
这一项只能打4分，2012年初体重77kg，到了现在超过80kg了。即没有达到年初的计划减肥5kg，还继续增重这么多，不可原谅啊。<br/>
分析：自从孩子回家后，体重呈现直线上升趋势。<br/>
2013： 增大运动量，尤其跑步和快走为主。</p>

<p><strong>工作</strong>
工作当中主要有两大块，项目和推广敏捷。项目只能是完成预期目标，部门内推广敏捷花了比较大的力气，获得一些成果。但仍然有提高的地方。例如，工作成果没有可视化或者很好的宣传。<br/>
分析：更多的时间花在推广敏捷上，项目开发受到影响。<br/>
2013：在项目上花更多的时间。敏捷推广上要注意方式方法。</p>

<p><strong>家庭</strong>
2013年是值得纪念的，可爱的宝宝今年来到我们身边。尤其是极低体重的早产儿，我的爱人和家人都付出了非常大的时间和努力。<br/>
分析：宝宝非常可爱，每天都有新变化。让我的生活丰富多彩。<br/>
2013：除了和宝宝的爱，还要更多和爱人及家庭多沟通，多一些时间相处。</p>

<p><strong>社交</strong>
社交方面，今年认识了更多做敏捷的朋友，在敏捷社区也认识了更多各地的敏捷之旅组织者。<br/>
Toastmaster方面，2012投入的精力比较少，在2013需要更多的参与活动。<br/>
分析：敏捷之旅北京站的组织，给我一个非常好的锻炼机会。<br/>
2013：更积极的参与到敏捷社区活动，敏捷中国和ScrumGathering分别投稿。</p>

<p><strong>读书</strong>
未能达到目标，读书20本，只读了12本。<br/>
分析：宝宝的到来，占了不少的休闲时间。使读书、学习时间也变少。<br/>
2013：新的一年，计划读书12本，集中于心理学、时间管理和敏捷相关</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scrum的起源]]></title>
    <link href="http://bobjiang.github.com/blog/2012/12/18/scrum-origin/"/>
    <updated>2012-12-18T06:21:00+08:00</updated>
    <id>http://bobjiang.github.com/blog/2012/12/18/scrum-origin</id>
    <content type="html"><![CDATA[<p>Scrum丰富的历史可以追溯到1986年《哈佛商业评论》中的一篇文章《新型的新产品开发策略》（The New New Product Development Game，竹内弘高、野中郁次郎，1986）。这篇文章描述了像本田、佳能、富士施乐这样的公司是如何通过可伸缩、基于团队的并行产品开发方式开发出了世界一流的产品。文章同时强调了授权、自组织团队的重要性，并概要描述了管理在开发过程中发挥的作用。<br/>
这篇发表于1986年的文章产生了很大影响，文章中提出的很多概念都促成了我们今天称为Scrum的方法的形成。Scrum不是缩写，而是一个从橄榄球运动中借用的术语，在橄榄球运动中，这个术语指的是在意外犯规或是球出界后，重新开始比赛的一种方式。就算你不是橄榄球迷，可能也看到过争球，两队的前锋球跟前围成一圈，胳膊架在一起，低着头，争夺球权。</p>

<!-- more -->


<p>竹内弘高和野中郁次郎使用橄榄球和争球的隐喻描述产品开发：</p>

<blockquote><p>产品开发那种“接力赛”的方式……可能和最快速、最灵活的目标有冲突。如果采用一种替代的方法，一种整体方法，或者叫做“橄榄球”方法——团队作为一个整体完成比赛，来回传球——能够更好地满足当今竞争的要求。</p></blockquote>


<p>1993年，Jeff Sutherland和他在Easel公司的团队把1986年那篇文章中的概念与面向对象开发、基于经验的过程控制、迭代和增量开发、软件过程和生产率研究、复杂适应系统中的概念结合起来，创建了用于软件开发工作的Scrum过程。1995年，Ken Schwaber在OOPSLA 1995 （Schwaber 1995）上发表了第一篇关于Scrum的论文。此后，Schwaber和Sutherland，一起或是独自完成了几个关于Scrum的出版物，包括Agile Software Development with Scrum （Schwaber与Beedle，2001）、Agile Project Management with Scrum（Schwaber 2004）和《Scrum指南》（“The Scrum Guide”，Schwaber与Sutherland，2011）。</p>

<hr />

<p>翻译自《Essential Scrum》，作者<a href="www.linkedin.com/pub/dir/Kenny/Rubin">Kenny Rusbin </a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敏捷之旅北京活动总结 2]]></title>
    <link href="http://bobjiang.github.com/blog/2012/12/05/agiletour-beijing-summary-2/"/>
    <updated>2012-12-05T21:24:00+08:00</updated>
    <id>http://bobjiang.github.com/blog/2012/12/05/agiletour-beijing-summary-2</id>
    <content type="html"><![CDATA[<p>敏捷之旅北京的话题如下：</p>

<p>Keynote：</p>

<ul>
<li>段念 《<a href="http://letagilefly.com/post/2012/12/douban-agile-practice-8872.html">生长出来的敏捷</a>》</li>
<li>乔梁《小心ScrumBUT——如何让敏捷落地生根》</li>
</ul>


<p>敏捷转型：（天）</p>

<ul>
<li>钱安川《如何用2天交付一个项目看板工具》</li>
<li>杨烽熵《敏捷变革的企业战略与实施》</li>
</ul>


<p>敏捷管理：（人）</p>

<ul>
<li>伍斌《<a href="http://letagilefly.com/post/2012/12/ppt-self-management-agile-team-8900.html">自动自发的敏捷团队</a>》</li>
<li>唱鑫《年轻的心-敏捷实践校园行》</li>
</ul>


<p>敏捷实践：（地）</p>

<ul>
<li>霍金健《<a href="http://letagilefly.com/post/2012/12/continuous-integration-presentation-agiletour-8895.html">与CI共舞</a>》</li>
</ul>


<p>话题的详细细节，<a href="www.letagilefly.com">请猛击这里</a>。</p>

<!-- more -->


<p>敏捷之旅2012北京的活动已经过去10多天了，但是一些做的好的地方一直留在我的脑袋里，现在整理一下：</p>

<ol>
<li>提前一天的签到彩排，排除了很多异常情况（比如团队报名的如何签到；如果找不到打印的名字怎么办等应急方案）</li>
<li>中午发盒饭，流水线作业，参会者自动自发的排队，效率很高。</li>
<li>现场的路线导向，参会者很方便的找到不同的分会场。</li>
</ol>


<p>关于作者<br/>
姜信宝  <a href="http://bobjiang.com/blog/2012/10/27/contact-bob-jiang/">请点击这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敏捷之旅2012北京站总结]]></title>
    <link href="http://bobjiang.github.com/blog/2012/12/04/agile-tour-beijing-summary/"/>
    <updated>2012-12-04T10:49:00+08:00</updated>
    <id>http://bobjiang.github.com/blog/2012/12/04/agile-tour-beijing-summary</id>
    <content type="html"><![CDATA[<p>敏捷之旅2012北京站总结<br/>
12月1日是忙碌的一天，也是充实的一天。这一天敏捷之旅2012北京站落下了帷幕。自从9月9日开始，在接近三个月的紧锣密鼓的筹备后，我们（组织者）有了一个完满的结果。</p>

<p>关于组织非盈利活动的一些个人感受：</p>

<!-- more -->


<ol>
<li>第一要素：钱。古语，兵马未动粮草先行就是这个道理。对于非盈利活动，寻找赞助商就是这个第一要素。</li>
<li>设置共同的目标（vision）。这个是至关重要的，否则只是一群人在做事，而不是一个团队。（group vs team）举个例子：我们的共同目标是在12月1日办一个200人规模的敏捷之旅社区活动。</li>
<li>建立核心团队。</li>
<li>明确责任和权利。发挥团队的自组织和个人积极主动性。</li>
<li>尽早确定演讲嘉宾（哪怕没有确定话题，尤其是有影响力的嘉宾，可以为活动带来人气）。</li>
<li>宣传要在有了吸引听众内容的基础上，否则就错过了宣传的最佳效果。这一点基于上一条，需要尽早确定演讲嘉宾。</li>
</ol>


<hr />

<p>本次敏捷之旅北京站的活动要感谢</p>

<ol>
<li>主要赞助商：<a href="http://www.outsofting.com/">OutSofting</a></li>
<li>场地赞助商：<a href="http://www.tup.com.cn/">清华大学出版社</a></li>
<li>媒体支持：<a href="http://headin.cn">海丁网</a>和<a href="http://www.infoq.com/cn">InfoQ中文网</a></li>
</ol>


<hr />

<p>敏捷之旅北京的后续报道<br/>
报道1 - <a href="http://blog.csdn.net/mebusw/article/details/8250491">来自mebusw的CSDN blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[闲置员工和闲置工作，哪个浪费更大？]]></title>
    <link href="http://bobjiang.github.com/blog/2012/11/24/idle-worker-vs-idle-work/"/>
    <updated>2012-11-24T07:34:00+08:00</updated>
    <id>http://bobjiang.github.com/blog/2012/11/24/idle-worker-vs-idle-work</id>
    <content type="html"><![CDATA[<p>闲置的工作浪费大，还是闲置的员工浪费更大？</p>

<p>从传统意义上来看，普遍认为闲置的员工是更大的浪费。作为老板，既然我花钱雇佣你，那么你就应该100%的时间在工作。&#8211;我猜想这是老板的普遍行为。</p>

<!-- more -->


<p>不幸的是，这种方法降低了一种形式的浪费（闲置人员的浪费），而与此同时增加了另一种形式的浪费（闲置工作的浪费）。而且，大多数时间，闲置工作的成本要远高于闲置人员的成本。</p>

<p>下面我们来举个例子：<br/>
<em>把“保持人员100%忙”的想法应用在运动会4×100米接力跑比赛中。基于这种想法，这个比赛看起来是非常低效的。在整个比赛过程中，运动员只跑了1/4的时间。剩下的时间他们就干站着。那么如果当他们没有拿到接力棒时，他们只在原地跑动，或许在临近的跑道跑另一场比赛？那样的话，他们就100%的在跑了。<br/>
但是显而易见，让运动员100%的时间都在跑，是不会赢得冠军的。只有他们作为一个团队拿着接力棒第一个冲过终点线，才能获得金牌。</em></p>

<blockquote><p>看好接力棒，而不是赛跑者</p></blockquote>


<p>在产品开发过程中，接力棒停留在地上，等价于工作已经准备好可以执行了，但是需要等待必要的资源而阻塞。当接力棒在地上的时候，你不会赢得比赛（交付产品）。（接力棒和赛跑者的这个比喻非常棒，因为它非常好地诠释了我们应该观察工作而不是人。但是，像任何比喻一样，它也有局限。这个比喻中，接力赛跑方法来传递工作恰恰是传统顺序开发中我们想要避免的一个方面！）</p>

<p>同时每个人都知道100%利用资源的危害。<br/>
<em>再说一个简单的例子，我们的电脑CPU或者内存如果100%在工作，那么我们可能什么也干不了。这个时候电脑慢的像一头老蜗牛（处理每个任务都是非常低效的）。</em></p>

<p>一旦员工100%利用起来（没有闲置的员工），这个时候闲置的工作就会呈指数级增长。而实际上闲置的工作成本比闲置人员更加昂贵，因此在Scrum中我们要清醒的认识到如何去除工作流中的瓶颈。</p>

<p><strong>让工作真正流动起来，而不是让员工忙起来！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敏捷之旅青岛 2012 启动]]></title>
    <link href="http://bobjiang.github.com/blog/2012/11/08/agiletour-qingdao-2012-kick-off/"/>
    <updated>2012-11-08T14:00:00+08:00</updated>
    <id>http://bobjiang.github.com/blog/2012/11/08/agiletour-qingdao-2012-kick-off</id>
    <content type="html"><![CDATA[<p><strong>敏捷之旅青岛站的组织活动启动了。</strong></p>

<p>2012年11月7日中午12点，方长江，孙淼，姜信宝（<a href="http://bobjiang.com">Bob Jiang</a>），<br/>
滕振宇（<a href="http://www.danielteng.com">Daniel Teng</a>）放弃了中午午休的时间，经过一个<br/>
小时的热烈协商，组织者队伍有了雏形。并且关键一点的是他们两位有了共同的目标 - <br/>
提高个人在敏捷社区的知名度，同时结交知名讲师，扩大社交。</p>

<p>最后的会议纪要如下：</p>

<!-- more -->


<p><strong>会议记录如下：</strong><br/>
参会人：<br/>
Bob Jiang (姜信宝)<br/>
方长江<br/>
孙淼<br/>
Daniel Teng (滕振宇)</p>

<ol>
<li><p>场地</p>

<ul>
<li>方长江联系朋友</li>
<li>考虑软件园做场地赞助</li>
<li>联系王春生，去年的场地是否可以继续使用。</li>
</ul>
</li>
<li><p>赞助商 （经费）<br/>
中荷人寿 - Bob （姜信宝）跟进，并介绍给两位<br/>
会议大致花费如下：</p>

<ul>
<li>讲师差旅费</li>
<li>会议当天水费，零食</li>
<li>场地免费，或有一定费用</li>
</ul>
</li>
<li><p>主题，见面聊</p>

<ul>
<li>下周一 11月12日 晚上见面聊 （方长江， 孙淼）</li>
<li>邀请王春生一起聊一下主题</li>
</ul>
</li>
</ol>


<hr />

<p>其他资源：<br/>
敏捷之旅中国网站： http://agiletour.cn<br/>
组织者职责（如何组织敏捷之旅活动） - http://agiletour.cn/org-responsability/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scrum精髓翻译工作启动]]></title>
    <link href="http://bobjiang.github.com/blog/2012/11/06/essential-scrum-translation-kick-off/"/>
    <updated>2012-11-06T13:33:00+08:00</updated>
    <id>http://bobjiang.github.com/blog/2012/11/06/essential-scrum-translation-kick-off</id>
    <content type="html"><![CDATA[<p>Essential Scrum一书的翻译团队终于组建完成，成员分别是姜信宝 左洪斌 米全喜
耿倩。在此之前我和左洪斌做了一些前期工作，翻译词汇表，也得到了文老师的积极反馈，反馈意见非常实用。 并且也有了参考依据。</p>

<p>下一步工作，文老师计划两周时间完成前三章60页，团队如何分工是一个挑战。 有如下几个方案：</p>

<!-- more -->


<ul>
<li><p>每人一章。<strong>优点</strong>：比较完整一部分。 <strong>缺点</strong>：每章页数不一，并且每人翻译风格不统一，会导致连续性变差。</p></li>
<li><p>每人固定页数。<strong>优点</strong>： 工作量固定。<strong>缺点</strong>：连续性更差。</p></li>
<li><p>每人翻译书中的一块，比如1-6章分配给一个人；7-12章另一个人；13-18章一个人；19-23章另一个人。<strong>优点</strong>：工作分配相对平均，翻译风格保持比较连续。
<strong>缺点</strong>：互相之间的协作少了一些。</p></li>
</ul>


<p>最终选择折中方案：第一章（10页）；第二章（20页）；第三章（29-44页）；第三章（44-60页）</p>

<p>不管选择哪个方案，第一期的目标是要完成的。<strong>两周60页（11月18日之前）</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续交付沙龙 - Jez]]></title>
    <link href="http://bobjiang.github.com/blog/2012/11/01/continuous-delivery-jez/"/>
    <updated>2012-11-01T22:35:00+08:00</updated>
    <id>http://bobjiang.github.com/blog/2012/11/01/continuous-delivery-jez</id>
    <content type="html"><![CDATA[<p>10月29日晚，很高兴参加了“AgileChina Salon - 持续交付” （http://event.weibo.com/636715） 这次活动邀请到了《持续交付》一书的作者， Jez Humble。 能够近距离的和大牛交流，很兴奋啊。</p>

<p>引子
flickr.com 每天可以发布10次以上。试想我们的软件多久可以发布。</p>

<!-- more -->


<p>持续交付需要频繁发布（releasing frequently）
但是频繁发布，包含哪些内容：
1. 构建正确的内容 - build the right thing
2. 降低发布风险 - reduce risk of release
3. 真正的项目进度 - real project progress
  在累积流图中（CFD）， 我们通过降低batch size（WIP），达到降低lead time的目的。 但是batch size多大合适， Jez建议： 3-4天的工作量。</p>

<p>部署流水线，是持续交付的核心内容。</p>

<p>Dark launching是什么？</p>

<p>发布不等于部署。 通过特性开关（feature toggle），可以讲部署好的内容进行发布，或者关闭。</p>

<p>很好的持续交付的资源：<a href="www.continuousdelivery.info">持续交付网站</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的博客起航了]]></title>
    <link href="http://bobjiang.github.com/blog/2012/10/27/blog-setup/"/>
    <updated>2012-10-27T22:33:00+08:00</updated>
    <id>http://bobjiang.github.com/blog/2012/10/27/blog-setup</id>
    <content type="html"><![CDATA[<p>我的github博客终于建好了，其中磕磕绊绊了很久，纠缠很长时间的一个问题是“git push 的时候 ssh.exe崩溃”</p>

<p>解决方案很简单： 右键ssh.exe，选择兼容性，选择“Windows XP Service Pack 2”</p>

<p>其他的过程就不一一废话了，给出一个简要列表：</p>

<!-- more -->


<ul>
<li>github申请账号(<a href="http://www.github.com" title="GitHub">http://www.github.com</a>)，创建一个repository名字为 <your account>.github.com</li>
<li>下载安装railsinstaller</li>
<li>配置git连接github</li>
<li>安装octopress</li>
</ul>


<p>有问题，欢迎大家一起讨论。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Contact Me]]></title>
    <link href="http://bobjiang.github.com/blog/2012/10/27/contact-me/"/>
    <updated>2012-10-27T20:27:00+08:00</updated>
    <id>http://bobjiang.github.com/blog/2012/10/27/contact-me</id>
    <content type="html"><![CDATA[<p>姜信宝 （Bob Jiang）
任职爱立信， CSM, PMP，热衷敏捷，曾参与组织敏捷之旅 2011北京站活动。在公司内致力于组织转型，对可视化管理、组织转型、演讲培训等兴趣浓厚。 新浪微博 @ 姜信宝Bob
jiangxb@gmail.com</p>

<p><img src="http://flic.kr/s/aHsjwx7CTw"></p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bob Jiang的简历]]></title>
    <link href="http://bobjiang.github.com/blog/2012/10/27/contact-bob-jiang/"/>
    <updated>2012-10-27T20:27:00+08:00</updated>
    <id>http://bobjiang.github.com/blog/2012/10/27/contact-bob-jiang</id>
    <content type="html"><![CDATA[<p>姜信宝 （Bob Jiang）<br/>
我的简历<a href="http://www.linkedin.com/pub/bob-jiang/23/2b8/5a8">LinkedIn</a></p>

<!-- more -->


<p>任职爱立信,CSM,PMP,敏捷教练<br/>
热衷敏捷,参与组织敏捷之旅 2011,2012北京站活动。<br/>
在公司内致力于组织转型，对可视化管理、组织转型、演讲培训等兴趣浓厚。<br/>
新浪微博:@姜信宝Bob<br/>
jiangxb@gmail.com</p>

<p><img src="http://bobjiang.github.com/images/me.jpg"></p>
]]></content>
  </entry>
  
</feed>
